@page "/house/list"
@page "/house/list/{filterText}"

@using HousingWebApp.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@using HousingWebApp.Pages.Components

@inherits AuthComponent

@inject IDbTransactionService TransactionService
@inject HousingDBContext db
@inject ProtectedLocalStorage storage
@inject NavigationManager navigateTo

<PageTitle>Houses</PageTitle>

@if(houses == null)
{
    <DefaultProgressBarComponent/>
}
else if(!houses.Any())
{
    <p>No houses found.</p>
}
else
{
    <div class="container mt-5">
        <h3 class="text-center">All Houses</h3>
        <div class="row justify-content-center mb-3">
            <div class="col-lg-6">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Filter users by house properties" @bind="filterText" />
                    <div class="input-group-append">
                        <button class="btn btn-outline-secondary" type="button" @onclick="ClearFilterText">
                            <i class="oi oi-x"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            @foreach (var house in FilteredHouses)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100 shadow-sm border-0 house-card">
                        <img class="card-img-top" src="@house.HouseImages.MainImage" alt="House image" style="max-height: 200px; object-fit: cover;">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@house.Info</h5>
                            <p class="card-text mb-1"><strong>Price:</strong> @house.Price</p>
                            <p class="card-text mb-1"><strong>Square Root:</strong> @house.SqrRoot</p>
                            <p class="card-text mb-1"><strong>Address:</strong> @house.Address.ToString()</p>
                            <p class="card-text mb-1"><strong>Owner:</strong> <a href="mailto:@house.AppUser.Email">@house.AppUser.LastName, @house.AppUser.FirstName</a></p>
                            <div class="mt-auto">
                                <button class="btn btn-primary me-2" @onclick="() => OpenGMaps(house.Id)">Go to Map</button>
                                <button class="btn btn-secondary me-2" @onclick="() => OpenDetails(house.Id)">Details</button>
                                @if(LoggedInUser.IsAdmin || house.AppUserId == LoggedInUser.Id)
                                {
                                    <button class="btn btn-warning" @onclick="() => OpenEditHouse(house.Id)">Edit</button>
                                    @* <button class="btn btn-danger">Delete</button> *@
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

<style>
    .house-card {
        border-radius: 1rem;
        transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
    }
    .house-card:hover {
        transform: scale(1.05);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }
    .card-img-top {
        border-top-left-radius: 1rem;
        border-top-right-radius: 1rem;
    }
    .card-body {
        padding: 1.5rem;
    }
    .btn {
        border-radius: 0.5rem;
    }
    .btn + .btn {
        margin-left: 0.5rem;
    }
</style>


@code {
    private List<House>? houses;
    private string filterText = "";


    [Parameter]
    public string FilterText
    {
        get => filterText;
        set
        {
            filterText = value;
            StateHasChanged();
        }
    }

    IEnumerable<House> FilteredHouses
    {
        get
        {
            if (string.IsNullOrWhiteSpace(filterText))
            {
                return houses;
            }
            else
            {
                return houses.Where(u =>
                    u.Info.ToLower().Contains(filterText.ToLower()) ||
                    u.Address.ToString().ToLower().Contains(filterText.ToLower()) ||
                    u.AppUser.FirstName.ToLower().Contains(filterText.ToLower()) ||
                    u.AppUser.LastName.ToLower().Contains(filterText.ToLower())
                );
            }
        }
    }
    void ClearFilterText()
    {
        filterText = "";
    }
    //protected override async Task OnInitializedAsync()
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender && houses == null)
        {
            houses = new();
            await LoadHousesAsync();
            StateHasChanged();
        }
    }

    private async Task LoadHousesAsync()
    {
        //await TransactionService.ExecuteInTransactionAsync(async () =>
        // {
        houses = await db.Houses.Include(h => h.Address)
        .Include(h => h.AppUser)
        .Include(h => h.HouseImages)
        .Include(h => h.HouseDetails)
        .ToListAsync();
        //});
    }

    private void OpenGMaps(int houseId)
    {
        // Navigate to GMapsComponent with houseId
        navigateTo.NavigateTo($"house/gmap/{houseId}");
    }

    private void OpenDetails(int houseId)
    {
        // Navigate to HouseDetails with houseId
        navigateTo.NavigateTo($"/house/{houseId}");
    }
    private void OpenEditHouse(int houseId)
    {
        // Navigate to EditHouseComponent with houseId
        navigateTo.NavigateTo($"/house/edit/{houseId}");
    }
}